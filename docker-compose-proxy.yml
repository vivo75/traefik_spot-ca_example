---
version: "3.9"

networks:
  test-net:
    name: "test.net"
    ipam:
      driver: default
      config:
        - subnet: 172.33.0.0/16
          ip_range: 172.33.5.0/24
          gateway: 172.33.5.254

services:

  ca:
    build:
      context: ./CA/
    image: test-net/step-ca:latest
    ports:
      - "9000:9000"
    ## Initialization is managed at build time
    ## See the Dockerfile
    #environment:
    #  DOCKER_STEPCA_INIT_NAME: "Smallstep"
    #  DOCKER_STEPCA_INIT_DNS_NAMES: "localhost,ca,ca.test.net"
    #  DOCKER_STEPCA_INIT_REMOTE_MANAGEMENT: "true"
    #  DOCKER_STEPCA_INIT_PROVISIONER_NAME: "admin"
    #  DOCKER_STEPCA_INIT_SSH: "true"
    #  DOCKER_STEPCA_INIT_ACME: "true"
    # volumes:
    #   - "step:/home/step"
    networks:
      test-net:
        aliases:
          - ca.test.net
        ipv4_address: 172.33.3.0
    healthcheck:
      test: ["CMD", "curl", "--fail", "--insecure", "https://ca.test.net:9000/health"]
      interval: 2s
      timeout: 1s
      retries: 2
      start_period: 2s

  traefik:
    build:
      context: ./traefik/
    image: test-net/traefik:2.10
    ports:
      - "8080:8080"
      - "80:80"
      - "443:443"
    environment:
      STEPCAURL: "https://ca.test.net:9000"
    stop_grace_period: 5s
    volumes:
      - type: bind
        source: ./traefik/traefik.yml
        target: /etc/traefik/traefik.yml
        read_only: True
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: True
    depends_on:
      ca:
        condition: service_healthy
    networks:
      test-net:
        aliases:
          - api1.test.net
          - api2.test.net
          - api3.test.net
        ipv4_address: 172.33.3.1
    labels:
      - traefik.docker.network=test-net

  api-server:
    build:
      context: ./api-server/
    image: test-net/api-server1:latest
    # full list of labels: https://doc.traefik.io/traefik/v2.0/reference/dynamic-configuration/docker/
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=test.net"
      - "traefik.http.middlewares.api-server-redirect-websecure.redirectscheme.scheme=https"
      - "traefik.frontend.passHostHeader=true"
      # Web
      - "traefik.http.routers.api-server-http.middlewares=api-server-redirect-websecure"
      - "traefik.http.routers.api-server-http.rule=Host(`api1.test.net`) || Host(`api2.test.net`) || Host(`api3.test.net`)"
      - "traefik.http.routers.api-server-http.entrypoints=web"
      - "traefik.http.routers.api-server-http.service=api-server-web"
      - "traefik.http.services.api-server-web.loadbalancer.server.port=80"
      # Web Secure
      - "traefik.http.routers.api-server.rule=Host(`api1.test.net`) || Host(`api2.test.net`) || Host(`api3.test.net`)"
      - "traefik.http.routers.api-server.entrypoints=websecure"
      - "traefik.http.routers.api-server.service=api-server-websecure"
      - "traefik.http.routers.api-server.tls=true"
      - "traefik.http.routers.api-server.tls.certresolver=api-server-resolver"
      # Traefik terminate TLS connections but also the backend server is encrypted
      - "traefik.http.services.api-server-websecure.loadbalancer.server.port=443"
      - "traefik.http.services.api-server-websecure.loadbalancer.server.scheme=https"
      - "traefik.default.protocol=https"
    depends_on:
      ca:
        condition: service_healthy
    environment:
      STEPCAURL: "https://ca.test.net:9000"
      IS_PASSTHROUGH: # MUST be empty to work as reverse proxy
    networks:
      test-net:
        aliases:
          - api1.local.net
          - api2.local.net
          - api3.local.net
        ipv4_address: 172.33.3.2
    healthcheck:
      test: ["CMD", "curl", "--fail", "--insecure", "https://api1.local.net:443/health"]
      interval: 2s
      timeout: 1s
      retries: 2
      start_period: 2s

  api-client:
    build:
      context: ./client/
    image: test-net/api-client:latest
    depends_on:
      ca:
        condition: service_healthy
    environment:
      STEPCAURL: "https://ca.test.net:9000"
    stop_grace_period: 1s
    networks:
      test-net:
        ipv4_address: 172.33.3.3
    # extra_hosts:
    #   - "api1.test.net:172.33.3.2"
